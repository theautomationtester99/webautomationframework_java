# First Minimal Image (Build Environment)
FROM debian:bookworm-slim as build-stage

# Install required dependencies
RUN apt-get update && apt-get install -y \
    wget \
    git \
    unzip \
    curl

# Install JDK 24
RUN wget -O jdk.tar.gz https://download.java.net/java/GA/jdk24.0.1/24a58e0e276943138bf3e963e6291ac2/9/GPL/openjdk-24.0.1_linux-x64_bin.tar.gz && \
    mkdir /opt/jdk && tar -xzf jdk.tar.gz -C /opt/jdk --strip-components=1 && \
    rm jdk.tar.gz

ENV JAVA_HOME=/opt/jdk
ENV PATH="$JAVA_HOME/bin:$PATH"

# Install Apache Maven (latest)
RUN wget -O maven.tar.gz https://dlcdn.apache.org/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz && \
    mkdir /opt/maven && tar -xzf maven.tar.gz -C /opt/maven --strip-components=1 && \
    rm maven.tar.gz

ENV MAVEN_HOME=/opt/maven
ENV PATH="$MAVEN_HOME/bin:$PATH"
ENV JAVA_TOOL_OPTIONS=--enable-native-access=ALL-UNNAMED

# Install Git and clone repository
ARG CACHEBUST=0
RUN echo $CACHEBUST && git clone https://github.com/theautomationtester99/webautomationframework_java.git /workspace
WORKDIR /workspace

# Build and package application
RUN mvn compile && mvn package -Dmaven.compiler.forceAnnotationProcessor=true -Dmaven.clean.failOnError=false

# Second Minimal Image (Runtime Environment)
FROM debian:bookworm-slim

# Install TightVNC and Cron
RUN apt-get update && apt-get install -y \
    xvfb \
    x11-apps \
    tightvncserver \
    lxde \
    dbus-x11 \
    xfonts-base \
    net-tools \
    cron \
    dos2unix \
    wget \
    libc6 \
    build-essential \
    gawk \
    bison \
    make \
    ftp \
    openssh-server  # Added SSH server

# Install JDK 24
RUN wget -O jdk.tar.gz https://download.java.net/java/GA/jdk24.0.1/24a58e0e276943138bf3e963e6291ac2/9/GPL/openjdk-24.0.1_linux-x64_bin.tar.gz && \
    mkdir /opt/jdk && tar -xzf jdk.tar.gz -C /opt/jdk --strip-components=1 && \
    rm jdk.tar.gz

ENV JAVA_HOME=/opt/jdk
ENV PATH="$JAVA_HOME/bin:$PATH"

# Configure SSH
RUN mkdir -p /var/run/sshd && \
    echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config && \
    echo 'PasswordAuthentication yes' >> /etc/ssh/sshd_config && \
    echo 'root:rootpassword' | chpasswd  # Set root password

EXPOSE 22

# Start SSH service
RUN service ssh restart

# Copy required files from build phase
COPY --from=build-stage /workspace/target/webautomationframework_java-1.0.jar /workspace/
COPY --from=build-stage /workspace/resources /workspace/resources/
COPY --from=build-stage /workspace/test_files /workspace/test_files/
COPY --from=build-stage /workspace/test_scripts /workspace/test_scripts/

RUN chmod -R 777 /workspace

# Configure VNC Server
RUN mkdir -p ~/.vnc && \
    echo "#!/bin/sh\nunset SESSION_MANAGER\nexport \$(dbus-launch)\nexec startlxde &" > ~/.vnc/xstartup && \
    chmod +x ~/.vnc/xstartup && \
    echo "password" | vncpasswd -f > ~/.vnc/passwd && \
    chmod 600 ~/.vnc/passwd

EXPOSE 5901
ENV USER=root
ENV DISPLAY=:0

# Set up and start Xvfb for the virtual display
RUN Xvfb :0 -screen 0 1024x768x24 &

COPY entrypoint_root.sh /root/entrypoint.sh
RUN dos2unix /root/entrypoint.sh && \
    chmod +x /root/entrypoint.sh

# Start Xvfb and cron service
# RUN echo '*/15 * * * * DISPLAY=:0 . /root/env_vars.sh; /workspace/runner --start >> /proc/1/fd/1 2>> /proc/1/fd/2' | crontab 
RUN echo '*/10 * * * * cd /workspace && DISPLAY=:0 . /root/env_vars.sh; java -jar webautomationframework_java-1.0.jar --start >> /proc/1/fd/1 2>> /proc/1/fd/2' | crontab -
RUN service cron restart

# Entrypoint for runtime container
CMD ["bash", "-c", "Xvfb :0 -screen 0 1024x768x24 & tightvncserver :1 -geometry 1024x768 -depth 24 && service cron restart && service ssh start && /root/entrypoint.sh && tail -f /dev/null"]